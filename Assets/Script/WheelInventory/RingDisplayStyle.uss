/* FILE: RingDisplayStyle.uss */

/* 
 * This is the base style for every slice of our ring.
 * We will assign the "ring-element" class to our RingElement in C#.
 */
.ring-element {
    /* Set the background color. This is our 'defaultColor'. */
    /* The custom mesh generator will read this value! */
    background-color: rgb(51, 51, 51); /* This is the same as new Color(0.2f, 0.2f, 0.2f) */

    /* The 'transition' property is the key to animation. */
    /* It tells UI Toolkit to smoothly animate changes to these properties over 0.2 seconds. */
    transition-property: background-color, transform, border-color;
    transition-duration: 0.2s;
    transition-timing-function: ease-out;
}

/* 
 * This is the :hover state. When the mouse is over the element,
 * these styles will be applied automatically.
 */
.ring-element:hover {
    /* Set the 'hoverColor'. */
    background-color: rgb(255, 255, 255); /* White */

    /* --- Adding an "Edge" --- */
    /* We add a border that is only visible on hover. */
    border-color: rgb(170, 210, 255); /* A light blue glow */
    border-width: 2px;
    
    /* --- Adding an "Animation" --- */
    /* We make the element "pop" out slightly by scaling it up. */
    transform: scale(1.05);
}

/* Style for the icon inside the ring element */
.ring-element__icon {
    /* We can even transition the icon's tint on hover */
    -unity-background-image-tint-color: white;
    transition-property: -unity-background-image-tint-color;
    transition-duration: 0.2s;
}

.ring-element:hover .ring-element__icon {
    /* When the parent is hovered, the icon gets a slight blue tint */
    -unity-background-image-tint-color: rgb(200, 225, 255);
}

/* Style for the text label inside the ring element */
.ring-element__label {
    color: white;
    -unity-font-style: bold;
    -unity-text-align: middle-center;
    text-shadow: 1px 1px 2px black;
}